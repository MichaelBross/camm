@using WebApplication2.CustomHtmlHelpers
@using Application.Models
@model Application.ViewModels.WorkOrderDetail

@{
    ViewBag.Title = "Work Orders";
}

<div class="search">
    <div class="row" style="margin-bottom:5mm">
        <div class="col-sm-3">
            @Html.TextBox("searchbox", "", new { @autofocus = "autofocus", @data_bind = "value:searchstring", @class = "form-control", @placeholder = "multiple keyword search" })
        </div>
        <div class="col-sm-1">
            <input type="button" class="btn btn-warning" style="width:80px" value="Search" data-bind="click: search" />
        </div>
    </div>
    <div>
        <table id="searchResultsTable" class="table table-striped table-bordered" typeof="display" style="width:100%"></table>
    </div>
</div>

<div class="form-horizontal card" style="margin-top:5mm">
    @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
    @*@Html.HiddenFor(model => model.WoNumber)*@

    <div>

        <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
            <h4 style="margin-left:3mm; margin-right:3mm; margin-top:2mm">Details</h4>
            <div class="btn-group mr-4" role="group" aria-label="First group">
                <button type="button" class="btn btn-primary" id="addBtn" data-bind="click: add, enable: enableAddButton ">Add</button>
                <button type="button" class="btn btn-primary" id="editBtn" data-bind="click: update, enable: enableEditButton">Edit</button>
                <button type="button" class="btn btn-primary" id="deleteBtn" data-bind="click: deleteItem, enable: enableDeleteButton">Delete</button>
                <button type="button" class="btn btn-primary" id="cancelBtn" data-bind="click: cancel, enable: enableCancelButton">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveBtn" data-bind="click: save, enable: enableSaveButton, text: SaveBtnText">Save</button>
            </div>
            <h4 id="deleteMessage" style="margin-left:3mm; margin-right:3mm; margin-top:2mm" data-bind="visible: showDeleteMessage">Click "Cancel" to abort. Click "Confirm" to delete.</h4>
        </div>

    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <form id="addeditform">
        @Html.AntiForgeryToken()
        <div class="card-body" data-bind="with:WorkOrder">
            <div class="row" style="margin-bottom:5mm; margin-right:5mm">
                <div class="col form-inline">

                    @Html.LabelFor(model => model.WoNumber, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.WoNumber, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value: WoNumber, enable: $parent.enableKeyTextBox" } })
                    @Html.ValidationMessageFor(model => model.WoNumber, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
                <div class="col form-inline">

                    @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.Customer, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value: Customer, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.Customer, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
                <div class="col form-inline">

                    @Html.LabelFor(model => model.CustomerPO, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.CustomerPO, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:CustomerPO, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.CustomerPO, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
            </div>
            <div class="row" style="margin-bottom:5mm; margin-right:5mm">
                <div class="col form-inline">

                    @Html.LabelFor(model => model.AssemblyNumber, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.AssemblyNumber, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:AssemblyNumber, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.AssemblyNumber, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
                <div class="col form-inline">

                    @Html.LabelFor(model => model.QuantityToBuild, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.QuantityToBuild, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:QuantityToBuild, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.QuantityToBuild, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
                <div class="col form-inline">

                    @Html.LabelFor(model => model.DueDate, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:DueDate, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
            </div>
            <div class="row" style="margin-bottom:5mm; margin-right:5mm">
                <div class="col form-inline">

                    @Html.LabelFor(model => model.SalesOrder, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.SalesOrder, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:SalesOrder, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.SalesOrder, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
                <div class="col form-inline">

                    @Html.LabelFor(model => model.SalesOrderLineItemNo, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.SalesOrderLineItemNo, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:SalesOrderLineItemNo, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.SalesOrderLineItemNo, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
                <div class="col form-inline">

                    @Html.LabelFor(model => model.WoStatus, htmlAttributes: new { @class = "control-label col-sm-4" })
                    @Html.EditorFor(model => model.WoStatus, new { htmlAttributes = new { @class = "form-control col-sm-8", @data_bind = "value:WoStatus, enable: $parent.enableEditableTextBoxes" } })
                    @Html.ValidationMessageFor(model => model.WoStatus, "", new { @class = "text-danger", @style = "width: 100%; text-align:center;" })

                </div>
            </div>
        </div>
    </form>
</div>


@section scripts{

    <script type="text/javascript">

        var viewModel = function() {
            var vm = this;
            vm.mode = ko.observable('Get');
            vm.wonumber = ko.observable();

            vm.WorkOrder = {
                WoNumber: ko.observable(),
                Customer: ko.observable(),
                CustomerPO: ko.observable(),
                SalesOrder: ko.observable(),
                DueDate: ko.observable(),
                AssemblyNumber: ko.observable(),
                QuantityToBuild: ko.observable(),
                WoStatus: ko.observable(),
                SalesOrderLineItemNo: ko.observable()
            }

            vm.clearModel = function () {
                vm.WorkOrder.WoNumber("");
                vm.WorkOrder.Customer("");
                vm.WorkOrder.CustomerPO("");
                vm.WorkOrder.SalesOrder("");
                vm.WorkOrder.DueDate("");
                vm.WorkOrder.AssemblyNumber("");
                vm.WorkOrder.QuantityToBuild("");
                vm.WorkOrder.WoStatus("");
                vm.WorkOrder.SalesOrderLineItemNo("");
            }

            vm.searchstring = ko.observable();
            @* Execute search on searchbox value change*@
            vm.searchstring.subscribe(function (newValue) {
                if (vm.mode() === 'Get') {
                    vm.search();
                }
            });

            vm.search = function () {
                vm.selectedRow = "";
                vm.table.search(vm.searchstring()).draw();
            }

            vm.selectedRow = "";

            vm.configureTable = function (data) {
                if (vm.table) {
                    vm.table.destroy();
                }
                vm.table = $('#searchResultsTable').DataTable({
                    "ajax": {
                        "url": "SearchServerSide",
                        "type": "POST",
                        "datatype": "json"
                    },
                    "drawCallback": function (settings) {
                        var api = this.api();
                        if (vm.selectedRow === "") {
                            var newdata = api.rows({ page: 'current' }).data();
                            if (vm.mode() === 'Get') {
                                vm.loadDetails(newdata[0]);
                            }
                            api.rows(0).select();
                        }
                        else {
                            vm.selectedRow.select();
                        }
                    },
                    "columns": [
                        { data: "WoNumber", name: "WoNumber", title: "WO Number" },
                        { data: "Customer", name: "Customer", title: "Customer" },
                        { data: "CustomerPO", name: "CustomerPO", title: "Customer PO" },
                        { data: "SalesOrder", name: "SalesOrder", title: "Sales Order" },
                        { data: "DueDate", name: "DueDate", title: "Due Date", render: function (d) {
                                return moment(d).format("YYYY/MM/DD");
                            }
                        },
                        { data: "AssemblyNumber", name: "AssemblyNumber", title: "Assembly Number" },
                        { data: "QuantityToBuild", name: "QuantityToBuild", title: "Quantity To Build" },
                        { data: "WoStatus", name: "WoStatus", title: "Wo Status" },
                        { data: "SalesOrderLineItemNo", name: "SalesOrderLineItemNo", title: "SO Item#" }
                    ],
                    "searching": "true",
                    "serverSide": "true",
                    "order": [0, "asc"],
                    "processing": "true",
                    "language": {
                        "processing": "processing, please wait"
                    },
                    "select": "single",
                    "dom": '<"top"i>rt<"bottom"lp><"clear">'
                });

                @*Load selected row into details *@
                $('#searchResultsTable tbody').on('click', 'tr', function () {
                    var data = vm.table.row($(this)).data();
                    vm.loadDetails(data);
                });

            };

            vm.configureTable();

            vm.add = function () {
                vm.clearModel();
                vm.mode('Add');
            };

            vm.update = function () {
                vm.mode('Update');
            };

            vm.showDeleteMessage = ko.observable(false);
            vm.deleteItem = function () {
                vm.mode('Delete');
            };

            vm.SaveBtnText = ko.observable('Save');

            vm.cancel = function () {
                vm.mode('Get');
                vm.loadSelecteRowIntoDetails();
                vm.clearErrorMessagesAndHighLights();
            };

            vm.save = function () {
                $.blockUI();
                if (vm.mode() === 'Delete' || vm.mode() === 'Add') {
                    vm.selectedRow = "";
                }
                else {
                    vm.selectedRow = vm.table.rows({ selected: true });
                }

                @* Enable input so that value will be serialized *@
                if (vm.mode() === 'Update' || vm.mode() === 'Delete') {
                    vm.enableKeyTextBox(true);
                }                
                var allFormData = $("#addeditform").serialize();
                @* Reapply input disable *@
                if (vm.mode() === 'Update' || vm.mode() === 'Delete') {
                    vm.enableKeyTextBox(false);
                }

                $.ajax({
                    url: vm.mode(),
                    data: allFormData,
                    type: "POST",
                    dataType: "json",
                    success: function (response) {
                        $("label").removeClass("text-danger");
                        $("input").removeClass("is-invalid");
                        if (response.success === true) {
                            vm.table.draw();
                            vm.mode('Get');
                        }
                        else {
                            vm.displayValidationErrors(response.errors);
                            if (response.ErrorMessage != null) {
                                alert(response.ErrorMessage);
                            }
                        }

                        $.unblockUI();
                    },
                    error: function (response) {
                        $.unblockUI();
                        alert("Error saving data.");
                    }
                });
            }

            vm.displayValidationErrors = function(errors) {

                $.each(errors, function (idx, validationError) {

                    @* Input box highlight *@
                    var element = $("form").find('#' + validationError.PropertyName);
                    element = element[0];
                    vm.highLightError(element, 'is-invalid');

                    @* Label highlight *@                    
                    element = $("label[for='" + validationError.PropertyName + "']");                    
                    vm.highLightError(element, 'text-danger');

                    @* Error message *@
                    var validationMessageElement = $('span[data-valmsg-for="' + validationError.PropertyName + '"]');
                    validationMessageElement.removeClass('field-validation-valid');
                    validationMessageElement.addClass('field-validation-error');
                    validationMessageElement.text(validationError.ErrorMessage);
                });
            }

            vm.highLightError = function (element, errorClass) {
                element = $(element);
                element.addClass(errorClass);
            }

            vm.removeHighLight = function (element, errorClass) {
                element = $(element);
                element.removeClass(errorClass);
            }

            vm.clearErrorMessagesAndHighLights = function () {
                @* Clear message *@
                $(".field-validation-error").removeClass('field-validation-error').addClass('field-validation-valid');
                $(".field-validation-valid").text("");
                @* Remove highlight on textbox *@
                $(".is-invalid").removeClass('is-invalid');
                @* Change label to black *@
                $("label").removeClass('text-danger');
            };

            $("input").change(function () {
                if ($(this).hasClass("input-validation-error")) {
                    var element = $("form").find('#' + this.name);
                    element = element[0];
                    vm.highLightError(element, 'is-invalid')
                    element = $("label[for='" + this.name + "']");
                    vm.highLightError(element, 'text-danger');
                }
                else {
                    var element = $("form").find('#' + this.name);
                    element = element[0];
                    vm.removeHighLight(element, 'is-invalid')
                    element = $("label[for='" + this.name + "']");
                    vm.removeHighLight(element, 'text-danger');
                    var element = $("form").find('data-valmg-for+' + this.name);
                    element.text("");
                }
            });

            vm.loadSelecteRowIntoDetails = function () {
                vm.selectedRows = vm.table.rows({ selected: true }).data();
                var data = vm.selectedRows[0];
                vm.loadDetails(data);
            }

            vm.loadDetails = function (data) {
                if (data === undefined) {
                    vm.clearModel();
                    return;
                }
                vm.WorkOrder.WoNumber(data["WoNumber"]);
                vm.WorkOrder.Customer(data["Customer"]);
                vm.WorkOrder.CustomerPO(data["CustomerPO"]);
                vm.WorkOrder.SalesOrder(data["SalesOrder"]);
                vm.WorkOrder.DueDate(moment(data["DueDate"]).format("YYYY/MM/DD"));
                vm.WorkOrder.AssemblyNumber(data["AssemblyNumber"]);
                vm.WorkOrder.QuantityToBuild(data["QuantityToBuild"]);
                vm.WorkOrder.WoStatus(data["WoStatus"]);
                vm.WorkOrder.SalesOrderLineItemNo(data["SalesOrderLineItemNo"]);
            };

            vm.enableKeyTextBox = ko.observable(false);
            vm.enableEditableTextBoxes = ko.observable(false);

            vm.enableAddButton = ko.observable(true);
            vm.enableEditButton = ko.observable(true);
            vm.enableDeleteButton = ko.observable(true);
            vm.enableCancelButton = ko.observable(false);
            vm.enableSaveButton = ko.observable(false);

            vm.mode.subscribe(function (newMode) {
                if (newMode === 'Get') {
                    @* Unblock search div *@
                    $('div.search').unblock();

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(false);

                    vm.enableAddButton(true);
                    vm.enableEditButton(true);
                    vm.enableDeleteButton(true);
                    vm.enableCancelButton(false);
                    vm.enableSaveButton(false);
                    $(".btn-outline-primary").removeClass("btn-outline-primary"); @*remove any button highlights*@

                    vm.showDeleteMessage(false);
                    vm.SaveBtnText('Save');
                }
                if (newMode === 'Add') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(true);
                    vm.enableEditableTextBoxes(true);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#addBtn").addClass("btn-outline-primary"); @*highlight the add button*@
                }
                if (newMode === 'Update') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(true);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#editBtn").addClass("btn-outline-primary"); @*highlight the edit button*@
                }
                if (newMode === 'Delete') {
                    @* Block the search div *@
                    $('div.search').block({ message: null });

                    vm.enableKeyTextBox(false);
                    vm.enableEditableTextBoxes(false);

                    vm.enableAddButton(false);
                    vm.enableEditButton(false);
                    vm.enableDeleteButton(false);
                    vm.enableCancelButton(true);
                    vm.enableSaveButton(true);
                    $(".btn-outline-primary").removeClass("btn-outline-primary");
                    $("#deleteBtn").addClass("btn-outline-primary"); @*highlight the delete button*@

                    vm.showDeleteMessage(true);
                    vm.SaveBtnText('Confirm');
                }
            });
        }

        $(document).ready(function () {
            workordermodel = new viewModel();
            ko.applyBindings(workordermodel);
        });



    </script>
}

